
import sys
import os
import shutil
import math

print "\nPython utility for generating ChannelML based synapse for given name, conductance etc. "

origCmd = ""
for arg in sys.argv: origCmd = origCmd+" "+arg

if len(sys.argv) is not 4:
    print "Usage:\n   python genSyn.py Syn_AMPA_TCR_nRT tau_in_ms scaling_in_nS \n"
    exit()

name = sys.argv[1]
tau = float(sys.argv[2])
scaling = float(sys.argv[3])

print "Creating a synapse mechanism: %s with time course val: %f ms, and syn scaling %f nS" % (name, tau, scaling)

max_cond = 1e-6 * scaling * tau / math.e

print "Maximum conductance will be: %e mS"%max_cond


if os.path.exists(name):
    ans = raw_input("Directory %s exists! Overwrite (y/n)?"% name)
    if ans is "y":
        shutil.rmtree(name)
    else:
        exit()

os.makedirs(name)

cmlSynXmlFilename = "ChannelMLSyn.xml"
propsFilename = "properties.xml"
neuronFilename= "ChannelML_v1.8.1_NEURONmod.xsl"
genesisFilename= "ChannelML_v1.8.1_GENESIStab.xsl"
xslLocation = "../../../templates/xmlTemplates/Schemata/v1.8.1/Level2/"

props = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+ \
"<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">"+\
"<properties>\n"+\
"<entry key=\"Description\">DESC</entry>\n"+\
"<entry key=\"NEURON mapping\">"+neuronFilename+"</entry>\n"+\
"<entry key=\"GENESIS mapping\">"+genesisFilename+"</entry>\n"+\
"<entry key=\"Implementation method\">ChannelML based Cell Mechanism</entry>\n"+\
"<entry key=\"NEURON file requires compilation\">true</entry>\n"+\
"<entry key=\"Mechanism Type\">Synaptic mechanism</entry>\n"+\
"<entry key=\"ChannelML file\">"+cmlSynXmlFilename+"</entry>\n"+\
"<entry key=\"GENESIS file requires compilation\">true</entry>\n"+\
"<entry key=\"Mechanism Name\">NAME</entry>\n"+\
"<entry key=\"Mechanism Model\">ChannelML based process</entry>\n"+\
"</properties>"

cml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+ \
"<channelml xmlns=\"http://morphml.org/channelml/schema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:meta=\"http://morphml.org/metadata/schema\" "+\
"xsi:schemaLocation=\"http://morphml.org/channelml/schema  http://www.neuroml.org/NeuroMLValidator/NeuroMLFiles/Schemata/v1.8.1/Level2/ChannelML_v1.8.1.xsd\" units=\"Physiological Units\">"+\
"\n\n"+ \
"    <meta:notes>ChannelML file describing a single synaptic mechanism</meta:notes>\n"+ \
"\n"+ \
"    <synapse_type name=\"NAME\">\n"+ \
"\n"+ \
"        <status value=\"stable\"><meta:contributor><meta:name>Padraig Gleeson</meta:name></meta:contributor></status>\n"+ \
"\n"+ \
"        <meta:notes>NOTES</meta:notes>\n"+ \
"\n"+ \
"        <doub_exp_syn max_conductance=\"MAX_COND\" rise_time=\"TAU\" decay_time=\"TAU\" reversal_potential=\"REV_POT\"/>\n"+ \
"\n"+ \
"    </synapse_type>\n"+ \
"\n"+ \
"</channelml>\n"


desc = "Synapse in ChannelML automatically generated by: %s "%origCmd

props = props.replace("NAME", name)
props = props.replace("DESC", desc)

propsFile = open(name+"/"+propsFilename, mode='w')
propsFile.write(props)
propsFile.close()

cml = cml.replace("NAME", name)
cml = cml.replace("NOTES", desc)
cml = cml.replace("MAX_COND", str(max_cond))
cml = cml.replace("TAU", str(tau))

if "AMPA" in name:
    cml = cml.replace("REV_POT", "0")


cmlFile = open(name+"/"+cmlSynXmlFilename, mode='w')
cmlFile.write(cml)
cmlFile.close()

neuronFile = os.path.abspath(xslLocation+neuronFilename)
print "Copying %s to directory %s " % (neuronFile, name)
shutil.copy(neuronFile, name)

genesisFile = os.path.abspath(xslLocation+genesisFilename)
print "Copying %s to directory %s " % (genesisFile, name)
shutil.copy(genesisFile, name)



print "Done!\n"
