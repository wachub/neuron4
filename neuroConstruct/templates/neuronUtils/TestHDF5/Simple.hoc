//  ******************************************************
// 
//     File generated by: neuroConstruct v1.3.3
// 
//  ******************************************************

{load_file("nrngui.hoc")}

{startsw()}
nCells = 40

create secs[nCells]
access secs[0]

objectvar stim[nCells]


tstop = 100
dt = 0.01
steps_per_ms = 1/dt

numPoints = (tstop * 1/dt)+1

showPlot = 0

//////////////////////////////
//
//  recOption = 1  => Save vectors in text files using hoc
//  recOption = 2  => Save vectors in text files using python
//  recOption = 3  => Save vectors in HDF5 file with 1 table for each cell
//  recOption = 4  => Save vectors in HDF5 file with 1 table for each cell group
//  recOption = 5  => Save vectors in HDF5 file with 1 table for each cell group, and use compression

recOption = 4

print "Using recording option: ", recOption

//////////////////////////////

objref r
r = new Random()


for i=0, nCells-1 {

    secs[i] {
        L = 100
        diam = 1
        nseg = 10
        insert pas
        insert hh

        stim[i] = new IClamp(0.5)
        stim[i].del = 20.0
        stim[i].dur = tstop -20
        stim[i].amp = r.uniform(0.1, 0.2)
    }
}

//psection()



//   This code pops up a plot of a_SampleCellGroup[0].Soma.v(0.5)


objref SampleGraph

if (showPlot==1) {
    SampleGraph = new Graph(0)
    {SampleGraph.size(0,tstop,-90.0,50.0)}
    {SampleGraph.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
    {
        SampleGraph.addexpr("a_secs[0].v", "secs[0].v(0.5)", 1, 1, 0.8, 0.9, 2)
        graphList[0].append(SampleGraph)
    }
}




//  Recording 1 variable(s)

objref v_time
objref f_time
objref propsFile

objref v_cell[nCells]

if (recOption > 0) {

    v_time = new Vector()
    { v_time.record(&t) }
    { v_time.resize(numPoints) }
    f_time = new File()


    for i=0, nCells-1 {
        v_cell[i] = new Vector()
        v_cell[i].record(&secs[i].v(0.5))
        v_cell[i].resize(numPoints)
    }
} 






strdef targetDir
targetDir = "."


//  Single simulation run...

strdef date
{system("date +%x,%X:%N", date)}
{setuptime = stopsw()}


print "Starting simulation of duration ",tstop," ms,  variable time step, reference: Sim_2 at time: ", date, ""

{currenttime = startsw()}

//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////


//  Setting basic variable time step active

{run()}

{system("date +%x,%X:%N", date)}
{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Current time: ", date

print "Removing old *.dat and *.h data files and storing the new data..."
print ""

{system("rm -f *dat")}
{system("rm -f *h5")}

strdef timeFilename

objref f_cell[nCells]


if (recOption == 1) {

    for i=0, nCells-1 {
        f_cell[i] = new File()
        strdef filename
        {sprint(filename, "Cell_%d.dat",  i)}
        f_cell[i].wopen(filename)
        v_cell[i].printf(f_cell[i])
        f_cell[i].close()
    }

    { sprint(timeFilename, "%s", "time.dat")}
    { f_time.wopen(timeFilename) }
    { v_time.printf(f_time) }
    { f_time.close() }

} else if (recOption == 2) {

    nrnpython("from neuron import *")

    strdef cr
    cr = "\n"
    nrnpython("cr = h.cr")

    for i=0, nCells-1 {
        nrnpython("f = open('Cell_%i.dat' % (h.i), 'w')")
        nrnpython("voltFloats = h.v_cell[int(h.i)].to_python()")
        nrnpython("volts = map (str, voltFloats)")
        nrnpython("f.writelines(volts)")
        nrnpython("f.flush()")
        //nrnpython("print volts")
    }


} else if (recOption == 3) {

    nrnpython("import numpy")
    nrnpython("import tables")
    nrnpython("from neuron import *")

    nrnpython("h5file = tables.openFile('volts.h5', mode = 'w', title = 'Voltages saved from NEURON')")

    nrnpython("group = h5file.createGroup('/', 'voltage', 'Arrays of cell membrane potentials')")

    for i=0, nCells-1 {
        nrnpython("volts = h.v_cell[int(h.i)].to_python()")
        nrnpython("h5file.createArray(group, 'Cell_'+str(int(h.i)), volts, 'Membrane potential values')")
    }

    nrnpython("h5file.close()")

} else if (recOption == 4) {

    nrnpython("import numpy")
    nrnpython("import tables")
    nrnpython("from neuron import *")

    nrnpython("allVolts = numpy.zeros( (h.numPoints, h.nCells) , dtype=numpy.float32 )")
    nrnpython("print allVolts.shape")

    nrnpython("h5file = tables.openFile('volts.h5', mode = 'w', title = 'Voltages saved from NEURON')")

    for i=0, nCells-1 {
        nrnpython("volts = h.v_cell[int(h.i)].to_python()")

        nrnpython("allVolts[:,int(h.i)] = volts")
    }

    nrnpython("group = h5file.createGroup('/', 'CellGroup1', 'Some cell group')")

    nrnpython("h5file.createArray(group, 'voltage', allVolts, 'Some membrane potential values')")

    nrnpython("h5file.close()")
  
} else if (recOption == 5) {

    nrnpython("import numpy")
    nrnpython("import tables")
    nrnpython("from neuron import *")

    nrnpython("h5file = tables.openFile('volts.h5', mode = 'w', title = 'Voltages saved from NEURON')")

    nrnpython("group = h5file.createGroup('/', 'CellGroup1', 'Some cell group')")
    
    nrnpython("atom = tables.Float32Atom()")
    nrnpython("filters_comp = tables.Filters(complevel=0, complib='zlib', fletcher32=True)")

    nrnpython("hArray = h5file.createCArray(group, 'voltage', atom, (h.numPoints, h.nCells), title='Some membrane potential values', filters=filters_comp)")
    
    for i=0, nCells-1 {

        nrnpython("hArray[:,int(h.i)] = h.v_cell[int(h.i)].to_python()")
    }

    nrnpython("h5file.close()")
}

{savetime = stopsw()}


print "Data stored in ",savetime, "secs in directory: ", targetDir
print "Total size of dir: "
{system("du -h --exclude=.svn")}

quit()

